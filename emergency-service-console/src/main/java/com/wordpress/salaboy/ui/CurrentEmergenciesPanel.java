/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CurrentEmergenciesPanel.java
 *
 * Created on Nov 24, 2010, 6:23:51 PM
 */
package com.wordpress.salaboy.ui;

import java.beans.PropertyVetoException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author esteban
 */
public class CurrentEmergenciesPanel extends javax.swing.JPanel {

    private UserTaskListUI parent;
    private Map<Long, EmergencyFrame> emergencyFrames = new ConcurrentHashMap<Long, EmergencyFrame>();

    public CurrentEmergenciesPanel(UserTaskListUI parent) {
        this.parent = parent;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Current Emergencies"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void addNewEmergency(long ambulanceId) {
        EmergencyFrame emergencyFrame = new EmergencyFrame(parent, ambulanceId);
        this.emergencyFrames.put(ambulanceId, emergencyFrame);
        this.add(emergencyFrame);
        try {
            emergencyFrame.setMaximum(true);
            emergencyFrame.setTitle("Ambulance Monitor (" + ambulanceId + ")");
        } catch (PropertyVetoException ex) {
            Logger.getLogger(CurrentEmergenciesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.validate();
    }

    public EmergencyFrame getEmergencyFrameById(Long id) {
        return this.emergencyFrames.get(id);
    }

    public void onHospitalReached(Long ambulanceId) {
        if (!this.emergencyFrames.containsKey(ambulanceId)) {
            throw new IllegalArgumentException("Ambulance " + ambulanceId + " was not registered before!");
        }

        EmergencyFrame emergencyFrame = this.emergencyFrames.remove(ambulanceId);
        this.remove(emergencyFrame);

        this.validate();
    }

    public void onHeartBeatReceived(Long ambulanceId, int pulse) {
        if (ambulanceId == null) {
            //broadcast: pulse emulator
            for (Map.Entry<Long, EmergencyFrame> entry : emergencyFrames.entrySet()) {
                entry.getValue().getEmergencyMonitorPanel().updateMonitorGraph(pulse);
            }
        } else {
            //direct event
            EmergencyMonitorPanel emergencyMonitorPanel = this.getEmergencyFrameById(ambulanceId).getEmergencyMonitorPanel();
            if (emergencyMonitorPanel != null) {
                emergencyMonitorPanel.updateMonitorGraph(pulse);
            }
        }
    }
}
